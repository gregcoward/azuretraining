{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "The BIG-IP administrator username."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The BIG-IP administrator password."
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_A4",
      "metadata": {
        "description": "The size of the Virtual Hardware Instance."
      },
      "allowedValues": [
        "Standard_A3",
        "Standard_A4",
        "Standard_F4"
      ]
    },
    "authFqdn": {
      "type": "string",
      "defaultValue": "dc.f5demo.net",
      "metadata": {
        "description": "Specify your Active Directory domain controller FQDN.
      }
    },
    "authIp": {
      "type": "string",
      "defaultValue": "172.16.60.5",
      "metadata": {
        "description": "Specify your Active Directory domain controller IP."
      }
    },
    "domainFqdn": {
      "type": "string",
      "defaultValue": "f5demo.net",      
      "metadata": {
        "description": "Specify the FQDN of the Active Directory deployment for your Office 365 users. This is the FQDN for your domain, such as example.com, rather than the FQDN for any specific host."
      }
    },
    "dnsFqdn": {
      "type": "string",
      "defaultValue": "access.f5demo.net",      
      "metadata": {
        "description": "The public federation endpoint FQDN"
      }
    },
    "sslCert": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/gregcoward/o365Federation/master/access.f5demo.net.pfx",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    },
    "sslPswd": {
      "type": "securestring",
      "defaultValue": "F5testnet",
      "metadata": {
        "description": "The SSL certificate .pfx file corresponding to public facing VIP."
      }
    }
  },
  "variables": {
    "vnetName": "VNET",
    "vnetAddressPrefix": "10.10.0.0/16",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
    "subnetName": "external",
    "subnetAddressPrefix": "10.10.1.0/24",
    "subnetref": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "apiVersionCompute": "2016-03-30",
    "apiVersionNetwork": "2015-06-15",
    "apiVersionStorage": "2015-06-15",
    "linkTemplateApiVersion": "2015-01-01",
    "dnsNameForPublicIP": "[concat('f5', uniqueString(resourceGroup().id))]",
    "entityId": "[concat('https://',trim(parameters('dnsFqdn')),'/idp/f5/')]",
    "loadBalancerName": "[concat(variables('bigipNamePrefix'),'-alb')]",
    "baseUrl": "https://raw.githubusercontent.com/gregcoward/azuretraining/master/",
    "availabilitySetName": "[concat(variables('bigipNamePrefix'),'-avset')]",
    "appPort": 6443,
    "newStorageAccountName": "[concat(tolower(variables('dnsNameForPublicIP')),'stor')]",
    "numberofInstances": 2,
    "bigipNamePrefix": "bigip",
    "nicNamePrefix": "bigip-nic",
    "niId": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicNamePrefix'))]",
    "publicIPName": "[concat(variables('bigipNamePrefix'),'-ip')]",
    "scriptName": "o365FedDeploy.sh",
    "scriptLoc": "[concat(variables('baseUrl'),'/',variables('scriptName'))]",
    "iappTemplate": "f5.microsoft_office_365_idp.v1.1.0.tmpl",
    "iappUrl": "[concat(variables('baseUrl'),'/',variables('iappTemplate'))]",
    "runScripts": "runScripts.js",
    "runScriptsUrl": "[concat(variables('baseUrl'),'/',variables('runScripts'))]",
    "asId": "[resourceId('Microsoft.Network/availabilitySets',variables('availabilitySetName'))]",
    "lbId": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "publicIpId": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
    "f5ImageSKU": "f5-bigip-virtual-edition-1g-best-hourly",
    "f5ImagePublisher": "f5-networks",
    "f5ImageOffer": "f5-big-ip-hourly",
    "singleQuote": "'",
    "f5CloudLibsTag": "F5Networks-f5-cloud-libs-v1.0.0-0-g9f85e95.tar.gz",
    "f5CloudLibsTagUrl": "[concat(variables('baseUrl'),'/',variables('f5CloudLibsTag'))]",
    "commandArgs": "[concat(' -p ',variables('appPort'),' -e ', variables('entityId'),' -d ', parameters('authFqdn'),' -a ', parameters('authIp'),' -f ', parameters('domainfqdn'),' -c ', parameters('sslCert'),' -w ', parameters('sslPswd'),' -x ', parameters('adminPassword'),' -u ', variables('iappUrl'))]"
  },
  "resources": [
    {
      "name": "[variables('newStorageAccountNames')]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersionStorage')]",
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
        "apiVersion": "[variables('apiVersionNetwork')]",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('vnetName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('vnetAddressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[variables('subnetName')]",
              "properties": {
                "addressPrefix": "[variables('subnetAddressPrefix')]"
              }
            }
          ]
        }
      },
    {
      "apiVersion": "[variables('apiVersionCompute')]",
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "location": "[resourceGroup().location]",
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionNetwork')]",
      "type": "Microsoft.Network/loadBalancers",
      "tags": {
        "displayName": "AzureLoadBalancer"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('loadBalancerName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat('loadBalancerFrontEnd')]",
            "properties": {
              "publicIPAddress": {
                "id": "[concat(variables('publicIpId'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "loadBalancingRules": [
          {
            "Name": "APP1-HTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/lbprobeHTTPS', '1')]"
              },
              "protocol": "Tcp",
              "loadDistribution": "SourceIP",
              "frontendPort": 443,
              "backendPort": 6443,
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 6443,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[concat('lbprobeHTTPS', '1')]"
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "InboundNATRulesGUI"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('LoadBalancerName'),'/guimgt', copyIndex(1))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "f5Copy",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('LoadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'))]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8443)]",
        "backendPort": 8443,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-06-15",
      "tags": {
        "displayName": "InboundNATRulesSSH"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('LoadBalancerName'),'/sshmgt', copyIndex(1))]",
      "location":  "[resourceGroup().location]",
      "copy": {
        "name": "f5Copy",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [

      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('frontEndIPConfigID'))]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8022)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNamePrefix'), copyIndex(1))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "f5Copy",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[concat(variables('lbId'),'/inboundNatRules/guimgt',copyIndex(1))]",
        "[concat(variables('lbId'),'/inboundNatRules/sshmgt',copyIndex(1))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbId'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/', 'sshmgt',copyIndex(1))]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/', 'guimgt',copyIndex(1))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersionCompute')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('bigipNamePrefix'),copyindex(1))]",
      "location":  "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/',concat(variables('nicNamePrefix'),copyIndex(1)))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]"
      ],
      "copy": {
        "count": "[variables('numberOfInstances')]",
        "name": "f5Copy"
      },
      "plan": {
        "name": "[variables('f5ImageSKU')]",
        "publisher": "[variables('f5ImagePublisher')]",
        "product": "[variables('f5ImageOffer')]"
      },
      "properties": {
        "availabilitySet": {
          "id": "[variables('asId')]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('bigipNamePrefix'),copyindex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('f5ImagePublisher')]",
            "offer": "[variables('f5ImageOffer')]",
            "sku": "[variables('f5ImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat('osdisk',variables('bigipNamePrefix'),copyindex(1))]",
            "vhd": {
              "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('newStorageAccountName'),'/f5Disk',copyindex(1),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNamePrefix'),copyindex(1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('newstorageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('bigipNamePrefix'),copyIndex(1),'/start')]",
      "apiVersion": "[variables('apiVersionCompute')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "count": "[variables('numberOfInstances')]",
        "name": "f5Copy"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('bigipNamePrefix'), copyIndex(1))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "settings": {
          "fileUris": [
            "[variables('runScriptsUrl')]",
            "[variables('f5CloudLibsTagUrl')]"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('f5-rest-node ./runScripts.js --log-level debug --tag ', variables('f5CloudLibsTag'), ' --onboard \" --output /var/log/onboard.log --log-level debug --host ', reference(concat(variables('nicNamePrefix'),copyIndex(1))).ipConfigurations[0].properties.privateIpAddress, ' -u admin -p ', parameters('adminPassword'), ' --hostname ', concat(variables('bigipNamePrefix'), '.', parameters('domainFqdn')), ' --set-password admin:', parameters('adminPassword'), ' --db provision.1nicautoconfig:disable --db tmm.maxremoteloglength:2048 --module ltm:nominal --module asm:none --module apm:nominal --module afm:none --signal ONBOARD_DONE \" --script \" --wait-for ONBOARD_DONE --output /var/log/runScript.log --log-level debug --url ',variables('scriptLoc'),' --cl-args ', variables('singleQuote'),'-i ',reference(concat(variables('nicNamePrefix'),copyIndex(1))).ipConfigurations[0].properties.privateIpAddress, variables('commandArgs'), variables('singleQuote'), '\"')]"
        }
      }
    }
  ],
  "outputs": {
    "BIG-IP1 GUI-URL": {
      "type": "string",
      "value": "[concat('https://',reference(variables('publicIpId')).dnsSettings.fqdn,':8443')]"
    },
    "BIG-IP1 SSH-URL": {
      "type": "string",
      "value": "[concat(reference(variables('publicIpId')).dnsSettings.fqdn,' ',8022)]"
    },
    "BIG-IP2 GUI-URL": {
      "type": "string",
      "value": "[concat('https://',reference(variables('publicIpId')).dnsSettings.fqdn,':8444')]"
    },
    "BIG-IP2 SSH-URL": {
      "type": "string",
      "value": "[concat(reference(variables('publicIpId')).dnsSettings.fqdn,' ',8023)]"
    }
  }
  }
